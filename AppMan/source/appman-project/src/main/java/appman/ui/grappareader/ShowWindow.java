package appman.ui.grappareader;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;

import att.grappa.*;

/**
 * Displays the graphical user interface.
 * Reads the file generated by Reader. Using Grappa library, it draws 
 * (and update the drawing) the application DAG.
 * <P>
 * The state of the node execution is represented using different colors:
 * <UL>
 * <LI> green - executing
 * <LI> yellow - waiting an available cpu; ready to execute
 * <LI> blue - finished
 * <LI> red - waiting for dependent task
 * </UL> 
 *   
 * @author dalto
 */
public class ShowWindow
	implements GrappaConstants, Serializable
{
	private static final long serialVersionUID = 8556936168377636198L;

	public DemoFrame  frame  = null;

    public final static String SCRIPT = "formatDemo";
    
    JProgressBar pb = null;  //VDN
    protected int numberNodes=0;//VDN
    protected int finishedNodes=0;//VDN

    public Graph graphCopy = null;
    Parser programCopy;
    /*
    public static void main(String[] args) {
	InputStream input = System.in;
	if(args.length > 1) {
	    System.err.println("USAGE: java Demo12 [input_graph_file]");
	    System.exit(1);
	} else if(args.length == 1) {
	    if(args[0].equals("-")) {
		input = System.in;
	    } else {
		try {
		    input = new FileInputStream(args[0]);
		} catch(FileNotFoundException fnf) {
		    System.err.println(fnf.toString());
		    System.exit(1);
		}
	    }
	}
	Demo12 demo = new Demo12();
	demo.doDemo(input);
    }
    */
    	
    public ShowWindow() {
    }

    public void changeColorNode( String node, String color)
    {
    
    	Graph graph = programCopy.getGraph();//frame.graph;
		att.grappa.Node n2 = graph.findNodeByName(node);
		n2.setAttribute("color", color);
		graph.repaint();
		/*
		if( color.compareTo("blue") == 0){
			finishedNodes++;
			pb.setValue(finishedNodes);
		}
		*/
    }
    
    public void setNumberOfFinishedTasks( int n ){
    	finishedNodes = n;
    	pb.setValue(finishedNodes);
    }
    
    public void showDAG(String file) {
 	InputStream input = System.in;
		try {
		    input = new FileInputStream(file);
		} catch(FileNotFoundException fnf) {
		    System.err.println(fnf.toString());
		    System.exit(1);
		}
	    
	
	//Demo12 demo = new Demo12();
	
	this.doDemo(input);
   }
    
    public int getNumberOfNodes(){//VDN
    	return numberNodes;
    }
    
    void doDemo(InputStream input) {
	Parser program = new Parser(input,System.err);
	try {
	    //program.debug_parse(4);
	    program.parse();
	} catch(Exception ex) {
	    System.err.println("Exception: " + ex.getMessage());
	    ex.printStackTrace(System.err);
	    System.exit(1);
	}
	att.grappa.Graph graph = null;

	graph = program.getGraph();

	System.err.println("The graph contains " + graph.countOfElements(GrappaConstants.NODE|GrappaConstants.EDGE|GrappaConstants.SUBGRAPH) + " elements.");
	numberNodes = graph.countOfElements(GrappaConstants.NODE);//VDN
	
	
	graph.setEditable(true);
	//graph.setMenuable(true);
	graph.setErrorWriter(new PrintWriter(System.err,true));
	//graph.printGraph(new PrintWriter(System.out));

	System.err.println("bbox=" + graph.getBoundingBox().getBounds().toString());

	if (frame == null) {
		frame = new DemoFrame(graph);
		frame.show();
	}
	
	
	//////////// Codigo vindn
	/*
	try {
		long numMillisecondsToSleep = 5000; // 0.5 seconds
		Thread.sleep(numMillisecondsToSleep);
	} catch (InterruptedException e) {
		System.out.println("Erro no sleep");
	}

	Node n2 = graph.findNodeByName("C");
	n2.setAttribute("color", "red");
	graph.repaint();
	*/
	/////////////////////////
	
	graphCopy = graph;
	programCopy = program;

    }


    class DemoFrame extends JFrame implements ActionListener
    {
	GrappaPanel gp;
	Graph graph = null;

	JButton layout = null;
	JButton printer = null;
	JButton draw = null;
	JButton quit = null;
	JPanel panel = null;
	public DemoFrame(Graph graph) {
	    super("Application DAG");
	    this.graph = graph;

	    setSize(800,800);
	    setLocation(100,100);

	    addWindowListener(new WindowAdapter() {
		    @Override
			public void windowClosing(WindowEvent wev) {
			Window w = wev.getWindow();
			w.setVisible(false);
			w.dispose();
			//System.exit(0);
		    }
		});

	    JScrollPane jsp = new JScrollPane();
	    jsp.getViewport().setBackingStoreEnabled(true);

	    gp = new GrappaPanel(graph);
	    gp.addGrappaListener(new GrappaAdapter());
	    gp.setScaleToFit(true);

	    java.awt.Rectangle bbox = graph.getBoundingBox().getBounds();
  
	    GridBagLayout gbl = new GridBagLayout();
	    GridBagConstraints gbc = new GridBagConstraints();

	    gbc.gridwidth = GridBagConstraints.REMAINDER;
	    gbc.fill = GridBagConstraints.VERTICAL;
	    gbc.anchor = GridBagConstraints.WEST;
	    
	    

	    
	    panel = new JPanel();
	    panel.setLayout(gbl);

	    draw = new JButton("Draw");
	    //gbl.setConstraints(draw,gbc);
	    panel.add(draw);
	    draw.addActionListener(this);
	    
	    layout = new JButton("Layout");
	    //gbl.setConstraints(layout,gbc);
	    panel.add(layout);
	    layout.addActionListener(this);

	    printer = new JButton("Print");
	    //gbl.setConstraints(printer,gbc);
	    panel.add(printer);
	    printer.addActionListener(this);

	    quit = new JButton("Quit");
	    gbl.setConstraints(quit,gbc);
	    panel.add(quit);
	    quit.addActionListener(this);

	    //VDN
	    JLabel lbBarSpace = new JLabel("      ");
	    gbl.setConstraints(lbBarSpace,gbc);/////
	    panel.add(lbBarSpace);

	    //VDN
	    JLabel lbBar = new JLabel("Task Execution Progress");
	    gbl.setConstraints(lbBar,gbc);/////
	    panel.add(lbBar);
	    
	    //VDN
        pb = new JProgressBar(0,getNumberOfNodes());
        //pb.setSize(5,100);
        pb.setValue(0);
        pb.setStringPainted(true);
        pb.repaint();
        gbl.setConstraints(pb,gbc);//////
	    panel.add(pb);
	    
	    
	    
        
	    getContentPane().add("Center", jsp);//Center
	    getContentPane().add("North", panel);//West
	    

	    setVisible(true);
	    jsp.setViewportView(gp);
	}

	public void actionPerformed(ActionEvent evt) {
	    if(evt.getSource() instanceof JButton) {
		JButton tgt = (JButton)evt.getSource();
		if(tgt == draw) {
		    graph.repaint();
		} else if(tgt == quit) {
			//System.exit(0);
			frame.dispose();
		} else if(tgt == printer) {
		    graph.printGraph(System.out);
		    System.out.flush();
		} else if(tgt == layout) {
		    Object connector = null;
		    try {
			connector = Runtime.getRuntime().exec(ShowWindow.SCRIPT);
		    } catch(Exception ex) {
			System.err.println("Exception while setting up Process: " + ex.getMessage() + "\nTrying URLConnection...");
			connector = null;
		    }
		    if(connector == null) {
			try {
			    connector = (new URL("http://www.research.att.com/~john/cgi-bin/format-graph")).openConnection();
			    URLConnection urlConn = (URLConnection)connector;
			    urlConn.setDoInput(true);
			    urlConn.setDoOutput(true);
			    urlConn.setUseCaches(false);
			    urlConn.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
			} catch(Exception ex) {
			    System.err.println("Exception while setting up URLConnection: " + ex.getMessage() + "\nLayout not performed.");
			    connector = null;
			}
		    }
		    if(connector != null) {
			if(!GrappaSupport.filterGraph(graph,connector)) {
			    System.err.println("ERROR: somewhere in filterGraph");
			}
			if(connector instanceof Process) {
			    try {
				int code = ((Process)connector).waitFor();
				if(code != 0) {
				    System.err.println("WARNING: proc exit code is: " + code);
				}
			    } catch(InterruptedException ex) {
				System.err.println("Exception while closing down proc: " + ex.getMessage());
				ex.printStackTrace(System.err);
			    }
			}
			connector = null;
		    }
		    graph.repaint();
		}
	    }
	}
    }
}
