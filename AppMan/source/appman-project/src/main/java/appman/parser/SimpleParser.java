/* Generated By:JJTree&JavaCC: Do not edit this line. SimpleParser.java */
package appman.parser;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Vector;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import appman.DAGGraphGUI;
import appman.clustering.DAG_DSC;

public class SimpleParser/*@bgen(jjtree)*/implements SimpleParserTreeConstants, SimpleParserConstants {/*@bgen(jjtree)*/
	private static final Log log = LogFactory.getLog(SimpleParser.class);

  protected static JJTSimpleParserState jjtree = new JJTSimpleParserState();
  // To take care of variables values
  static int MAX_NUMBER_OF_VARIABLES = 500;
  static SymbolTable  symbolTable;

  // To store application definition
  static public ApplicationDescription appDescription;
  //static public ClusteringPhase cp; 

  //VDN
  static public DAGGraphGUI ddgui;
  static public transient FileWriter parserOut;

  public static void setDAGGraphGUI( DAGGraphGUI ddg){
                ddgui = ddg;
  }

  public static void main(String args[]) throws ParseException {
                parseGRIDADL(args);
   }

  public static ApplicationDescription parseGRIDADL(String args[]) throws ParseException {

        //VDN:2/9/5  
        long timeInitParse=0;
        long timeFinishParse=0;
        long timeInitInferDAG=0;
        long timeFinishInferDAG=0;
        timeInitParse = System.currentTimeMillis();

    log.debug("[GRAND] Starting parsing description file...");
    String filename = "teste.txt";
    if (args.length >= 1) {
        filename = args[0];
    }
    // SimpleParser parser = new SimpleParser(System.in);
    SimpleParser parser = null;
    try {
        FileReader filer = new FileReader(filename);
        if(!jj_initialized_once) { // first static parse
            parser = new SimpleParser(filer);
        } else {
          SimpleParser.ReInit(filer);
        }

    } catch (Exception e) {
    	log.error("[GRAND]\tParsing: Error opening description file", e);
       System.exit(1);
    }

    symbolTable = new SymbolTable(MAX_NUMBER_OF_VARIABLES);
    appDescription = new ApplicationDescription();

    SimpleNode rootNode =  SimpleParser.Input();

/*
    log.debug("[GRAND] start GRAPH DUMP.");
    rootNode.dump("  ");
    log.debug("[GRAND] GRAPH DUMP done.");
*/

/**/
    SimpleParserVisitor v = new SimpleParserDumpVisitor(appDescription,symbolTable);
    ASTRoot n = (ASTRoot) rootNode;
    n.jjtAccept(v, null);
    ///log.debug("Done visiting.");
/**/

        timeInitInferDAG = System.currentTimeMillis();
    DAG_DSC dag = appDescription.inferDAG();
    timeFinishInferDAG = System.currentTimeMillis();


    //VDN:1/11/05
    //cp = new ClusteringPhase(dag);
    //cp.clustering();

    log.debug("[GRAND] Parsing finished with success.");

    // vnd 2005/03/18: included here call to GRAPHVIZ - generates visualization graph
    //dag.dumpGraphiz();


/*
    log.debug("Testing DUMP:");
    dag.dump();
*/

    // DAGClustering d = new DAGClustering(dag);
    // int cluster[][] = d.doClusteringDSC();



    // vnd 2005/03/11
    //DAGSimpleClustering d = new DAGSimpleClustering(dag);
    //int cluster[][] = d.DoClustering();
    //ApplicationManager ap = new ApplicationManager( dag, cluster );
    //ap.submit();   


    //VDN:2/9/05  
    timeFinishParse = System.currentTimeMillis();
    try{
        parserOut = new FileWriter("parseOut.txt");
		parserOut.write((timeFinishParse - timeInitParse) + "\t");
		parserOut.write((timeFinishInferDAG - timeInitInferDAG + "\t"));
        parserOut.close();
    }catch( IOException e){
    	log.error("[Simple Parser] :", e);
    }


     return appDescription;
  }

/************
 * grammar - entry point
 */
  static final public SimpleNode Input() throws ParseException {
 /*@bgen(jjtree) Root */
  ASTRoot jjtn000 = new ASTRoot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        graphDefinition();
      } else {
        ;
      }
      setOfTaskDefinition();
      if (jj_2_2(2)) {
        transientFileDefinition();
      } else {
        ;
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
      // appDescription.inferDAG(); => moved to higher level
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void setOfTaskDefinition() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_3(2)) {
        taskDefinition();
      } else if (jj_2_4(2)) {
        loop();
      } else if (jj_2_5(2)) {
        assignment();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_6(2)) {
        ;
      } else {
        break label_1;
      }
    }
  }

/************
 * 
 */
  static final public void graphDefinition() throws ParseException {
    jj_consume_token(GRAPH);
    if (jj_2_7(2)) {
      jj_consume_token(INDEP);
               appDescription.putGraphType(0);
               log.debug("[GRAND]\tgraph=independent");
    } else if (jj_2_8(2)) {
      jj_consume_token(LOW);
               appDescription.putGraphType(1);
               log.debug("[GRAND]\tgraph=low-coupled");
    } else if (jj_2_9(2)) {
      jj_consume_token(HIGH);
               appDescription.putGraphType(2);
               log.debug("[GRAND]\tgraph=high-coupled");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/************
 * 
 */
  static final public void taskDefinition() throws ParseException {
 /*@bgen(jjtree) Task */
  ASTTask jjtn000 = new ASTTask(JJTTASK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String taskName="";
  String executable;
  String file;
  Vector inputfile=null;
  Vector outputfile=null;
  int compCost=-1;
    try {
      jj_consume_token(TASK);
      if (jj_2_14(2)) {
        if (jj_2_12(2)) {
          if (jj_2_10(2)) {
            t = jj_consume_token(constant);
          } else if (jj_2_11(2)) {
            t = jj_consume_token(number);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          taskName = ""+t.image;
        } else if (jj_2_13(2)) {
          t = jj_consume_token(var);
          taskName = ""+t.image;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }

      jj_consume_token(EXECUTABLE);
      executable = filename();

      if (jj_2_16(2)) {
        jj_consume_token(INPUT);
        file = filename();
          ///log.debug("[GRAND]\t("+taskName+") input="+file);
          inputfile = new Vector(1,1);
          inputfile.addElement(file);
        label_2:
        while (true) {
          if (jj_2_15(2)) {
            ;
          } else {
            break label_2;
          }
          jj_consume_token(LISTDELIMITER);
          file = filename();
          ///log.debug("[GRAND]\t("+taskName+") input="+file);
          inputfile.addElement(file);
        }
      } else {
        ;
      }
      if (jj_2_18(2)) {
        jj_consume_token(OUTPUT);
        file = filename();
          ///log.debug("[GRAND]\t("+taskName+") output="+file);
          outputfile = new Vector(1,1);
          outputfile.addElement(file);
        label_3:
        while (true) {
          if (jj_2_17(2)) {
            ;
          } else {
            break label_3;
          }
          jj_consume_token(LISTDELIMITER);
          file = filename();
          ///log.debug("[GRAND]\t("+taskName+") output="+file);
          outputfile.addElement(file);
        }
      } else {
        ;
      }
      if (jj_2_19(2)) {
        jj_consume_token(CAPACITY);
        t = jj_consume_token(number);
          ///log.debug("[GRAND]\t("+taskName+") computational power="+t.image);
          compCost = Integer.parseInt(t.image);
      } else {
        ;
      }
      if (jj_2_20(2)) {
        jj_consume_token(DONE);
      } else {
        ;
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
          /*moved to SPDumpVisitor:
          appDescription.addTask(taskName,executable,inputfile,outputfile,compCost);
          */
          jjtn000.setTaskName(taskName);
          jjtn000.setExecutable(executable);
          jjtn000.setInput(inputfile);
          jjtn000.setOutput(outputfile);
          jjtn000.setCompCost(compCost);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public String filename() throws ParseException {
  String file;
    file = filenameUnix();
       {if (true) return(file);}
    throw new Error("Missing return statement in function");
  }

  static final public String filenameUnix() throws ParseException {
  Token t;
  Token t2;
  Token t3;
  String file="";
    if (jj_2_27(2)) {
      if (jj_2_21(2)) {
        t = jj_consume_token(constant);
      } else if (jj_2_22(2)) {
        t = jj_consume_token(IN);
      } else if (jj_2_23(2)) {
        t = jj_consume_token(number);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          file=file+""+t.image;
    } else if (jj_2_28(2)) {
      label_4:
      while (true) {
        if (jj_2_24(2)) {
          t = jj_consume_token(string);
            // pkvm 2005/07/18: changed to exclude " from string
            String s = (t.image);
            file=file+""+s.substring(1,(s.length()-1));
        } else if (jj_2_25(2)) {
          t = jj_consume_token(var);
            file=file+""+t.image;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_26(2)) {
          ;
        } else {
          break label_4;
        }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
           ///log.debug("FILENAME - final: "+file);
           {if (true) return(file);}
    throw new Error("Missing return statement in function");
  }

/*-----------
 * 
 */
  static final public SimpleNode loop() throws ParseException {
 /*@bgen(jjtree) ForeachNode */
  ASTForeachNode jjtn000 = new ASTForeachNode(JJTFOREACHNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t_var;
  Vector rangeElements;
    try {
      jj_consume_token(FOREACH);
      t_var = jj_consume_token(constant);
      jjtn000.setVariableName(t_var.image);
      jj_consume_token(IN);
      rangeElements = range();
     int numberOfIterations = rangeElements.size();
     jjtn000.setNumberOfIterations(numberOfIterations);

     jjtn000.setRangeElements(rangeElements);
      jj_consume_token(28);
      setOfTaskDefinition();
      jj_consume_token(29);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
      // jjtThis is the node currently being built
      {if (true) return jjtn000;}
/*
    log.debug("Visiting...");
    SimpleParserVisitor v = new SimpleParserDumpVisitor(appDescription);
    ASTRoot n = (ASTRoot) rootNode;
    n.jjtAccept(v, null);
    log.debug("Done.");
*/

    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Vector range() throws ParseException {
Token t_begin;
Token t_end;
Vector listElements;
    if (jj_2_29(2)) {
      t_begin = jj_consume_token(number);
      jj_consume_token(30);
      t_end = jj_consume_token(number);
       int n_begin = Integer.parseInt(t_begin.image);
       int n_end = Integer.parseInt(t_end.image);
       int numberOfIterations = n_end - n_begin + 1;
       if (numberOfIterations < 0) {
    	   log.debug("[GRAND]\tERROR - aborting parsing");
    	   log.debug("  invalid range in foreach command: "+n_begin+".."+n_end);
    	   log.debug("  range should be a valid increasing integer interval");
          /*TODO - incluir na msg de erro o nro da linha */
       }
       log.debug("RANGE iterations:"+numberOfIterations);

       listElements = new Vector();
       for (int i = n_begin; i<=n_end; i++) {
          listElements.addElement(""+i);
       }
       {if (true) return  listElements;}
    } else if (jj_2_30(2)) {
      listElements = list();
       {if (true) return listElements;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*-----------
 * 
 */
  static final public void assignment() throws ParseException {
 /*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t_var;
  AssignmentBody value;
    try {
      t_var = jj_consume_token(constant);
      symbolTable.putVariable(""+t_var.image,"");
      jjtn000.setVariableName(""+t_var.image);
      jj_consume_token(31);
      value = assignmentBody();
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     // changed: instead of including in the symbolTable, 
     // includes in the Assignment node
     //  symbolTable.putVariable(""+t_var.image,value);
     jjtn000.setAssignmentBody(value);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

/**
 * returns for most cases a String object
 * returns Vector when receives a list
 */
  static final public AssignmentBody assignmentBody() throws ParseException {
   Token t;
   Token t_op;
   Vector l;
   AssignmentBody value;
       value = new AssignmentBody();
    if (jj_2_52(2)) {
      if (jj_2_31(2)) {
        t = jj_consume_token(var);
       value.setAsVariable();
       value.addValue(AssignmentBody.VARIABLE,""+t.image);
      } else if (jj_2_32(2)) {
        t = jj_consume_token(number);
       value.setAsConstant();
       value.addValue(AssignmentBody.CONSTANT,""+t.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        if (jj_2_33(2)) {
          ;
        } else {
          break label_5;
        }
        if (jj_2_44(2)) {
          if (jj_2_34(2)) {
            t_op = jj_consume_token(32);
          } else if (jj_2_35(2)) {
            t_op = jj_consume_token(33);
          } else if (jj_2_36(2)) {
            t_op = jj_consume_token(34);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          value.setAsOperation();
          value.addValue(AssignmentBody.OPERATION,""+t_op.image);
          if (jj_2_37(2)) {
            t = jj_consume_token(var);
          value.addValue(AssignmentBody.VARIABLE,""+t.image);
          } else if (jj_2_38(2)) {
            t = jj_consume_token(number);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          value.addValue(AssignmentBody.CONSTANT,""+t.image);
        } else if (jj_2_45(2)) {
          if (jj_2_39(2)) {
            t_op = jj_consume_token(35);
          } else if (jj_2_40(2)) {
            t_op = jj_consume_token(36);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          value.setAsOperation();
          value.addValue(AssignmentBody.OPERATION,""+t_op.image);
          if (jj_2_41(2)) {
            t = jj_consume_token(string);
            // pkvm 2005/07/20: changed to exclude " from string
            String s = (t.image);
            s=s.substring(1,(s.length()-1));
            value.addValue(AssignmentBody.STRING,""+s);
          } else if (jj_2_42(2)) {
            t = jj_consume_token(var);
          value.addValue(AssignmentBody.VARIABLE,""+t.image);
          } else if (jj_2_43(2)) {
            t = jj_consume_token(number);
          value.addValue(AssignmentBody.CONSTANT,""+t.image);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          {if (true) return value;}
    } else if (jj_2_53(2)) {
      t = jj_consume_token(string);
       value.setAsString();
       // pkvm 2005/07/20: changed to exclude " from string
       String s2 = (t.image);
       s2=s2.substring(1,(s2.length()-1));
       value.addValue(AssignmentBody.STRING,""+s2);
      label_6:
      while (true) {
        if (jj_2_46(2)) {
          ;
        } else {
          break label_6;
        }
        if (jj_2_47(2)) {
          t_op = jj_consume_token(35);
        } else if (jj_2_48(2)) {
          t_op = jj_consume_token(36);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
          value.setAsOperation();
          value.addValue(AssignmentBody.OPERATION,""+t_op.image);
        if (jj_2_49(2)) {
          t = jj_consume_token(string);
            // pkvm 2005/07/20: changed to exclude " from string
            String s = (t.image);
            s=s.substring(1,(s.length()-1));
          value.addValue(AssignmentBody.STRING,""+s);
        } else if (jj_2_50(2)) {
          t = jj_consume_token(var);
          value.addValue(AssignmentBody.VARIABLE,""+t.image);
        } else if (jj_2_51(2)) {
          t = jj_consume_token(number);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
          value.addValue(AssignmentBody.CONSTANT,""+t.image);
      }
          {if (true) return value;}
    } else if (jj_2_54(2)) {
      l = list();
       value.setAsList();
       value.addValue(AssignmentBody.LIST,""+l);
       {if (true) return value;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void operator() throws ParseException {
    if (jj_2_55(2)) {
      jj_consume_token(constant);
    } else if (jj_2_56(2)) {
      jj_consume_token(var);
    } else if (jj_2_57(2)) {
      jj_consume_token(number);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void mathOperator() throws ParseException {
    if (jj_2_58(2)) {
      jj_consume_token(var);
    } else if (jj_2_59(2)) {
      jj_consume_token(number);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Vector list() throws ParseException {
  Vector listContent=null;
  Token t;
    jj_consume_token(37);
    if (jj_2_60(2)) {
      t = jj_consume_token(constant);
      listContent=new Vector(10);
      listContent.addElement(""+t.image);
    } else if (jj_2_61(2)) {
      t = jj_consume_token(number);
      listContent=new Vector(10);
      listContent.addElement(""+t.image);
    } else if (jj_2_62(2)) {
      t = jj_consume_token(string);
      listContent=new Vector(10);
      listContent.addElement(""+t.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      if (jj_2_63(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(38);
      if (jj_2_64(2)) {
        t = jj_consume_token(constant);
            listContent.addElement(""+t.image);
      } else if (jj_2_65(2)) {
        t = jj_consume_token(number);
            listContent.addElement(""+t.image);
      } else if (jj_2_66(2)) {
        t = jj_consume_token(string);
            listContent.addElement(""+t.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(39);
      {if (true) return listContent;}
    throw new Error("Missing return statement in function");
  }

/************
 * 
 */
  static final public void transientFileDefinition() throws ParseException {
	  String debug = "";
  String file;
    jj_consume_token(TRANSIENT);
       debug += "[GRAND]\tTransient files:";
    label_8:
    while (true) {
      file = filename();
       debug += " " + file;
      if (jj_2_67(2)) {
        ;
      } else {
        break label_8;
      }
    }
       log.debug(debug);
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static final private boolean jj_3_32() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_24() {
    if (jj_scan_token(string)) return true;
    return false;
  }

  static final private boolean jj_3_31() {
    if (jj_scan_token(var)) return true;
    return false;
  }

  static final private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    return false;
  }

  static final private boolean jj_3_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_28() {
    Token xsp;
    if (jj_3_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_21() {
    if (jj_scan_token(constant)) return true;
    return false;
  }

  static final private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3_67() {
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3R_10() {
    if (jj_scan_token(TRANSIENT)) return true;
    Token xsp;
    if (jj_3_67()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_scan_token(constant)) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  static final private boolean jj_3_20() {
    if (jj_scan_token(DONE)) return true;
    return false;
  }

  static final private boolean jj_3_19() {
    if (jj_scan_token(CAPACITY)) return true;
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_66() {
    if (jj_scan_token(string)) return true;
    return false;
  }

  static final private boolean jj_3_30() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3_65() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_17() {
    if (jj_scan_token(LISTDELIMITER)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3_64() {
    if (jj_scan_token(constant)) return true;
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_scan_token(OUTPUT)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3_63() {
    if (jj_scan_token(38)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_scan_token(LISTDELIMITER)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3_62() {
    if (jj_scan_token(string)) return true;
    return false;
  }

  static final private boolean jj_3_29() {
    if (jj_scan_token(number)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static final private boolean jj_3_61() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_57() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_scan_token(INPUT)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3_60() {
    if (jj_scan_token(constant)) return true;
    return false;
  }

  static final private boolean jj_3_59() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_scan_token(37)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_56() {
    if (jj_scan_token(var)) return true;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_scan_token(var)) return true;
    return false;
  }

  static final private boolean jj_3_58() {
    if (jj_scan_token(var)) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_scan_token(constant)) return true;
    return false;
  }

  static final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    return false;
  }

  static final private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  static final private boolean jj_3_55() {
    if (jj_scan_token(constant)) return true;
    return false;
  }

  static final private boolean jj_3R_11() {
    if (jj_scan_token(TASK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    if (jj_scan_token(EXECUTABLE)) return true;
    return false;
  }

  static final private boolean jj_3_54() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(constant)) return true;
    return false;
  }

  static final private boolean jj_3_51() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_scan_token(HIGH)) return true;
    return false;
  }

  static final private boolean jj_3_50() {
    if (jj_scan_token(var)) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_scan_token(LOW)) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_scan_token(INDEP)) return true;
    return false;
  }

  static final private boolean jj_3_49() {
    if (jj_scan_token(string)) return true;
    return false;
  }

  static final private boolean jj_3_48() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  static final private boolean jj_3_47() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  static final private boolean jj_3_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_9() {
    if (jj_scan_token(GRAPH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  static final private boolean jj_3_53() {
    if (jj_scan_token(string)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_43() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  static final private boolean jj_3_42() {
    if (jj_scan_token(var)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static final private boolean jj_3_41() {
    if (jj_scan_token(string)) return true;
    return false;
  }

  static final private boolean jj_3_40() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  static final private boolean jj_3_39() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  static final private boolean jj_3_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_38() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_37() {
    if (jj_scan_token(var)) return true;
    return false;
  }

  static final private boolean jj_3_23() {
    if (jj_scan_token(number)) return true;
    return false;
  }

  static final private boolean jj_3_36() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  static final private boolean jj_3_35() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  static final private boolean jj_3_34() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  static final private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    return false;
  }

  static final private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  static final private boolean jj_3_22() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  static final private boolean jj_3_25() {
    if (jj_scan_token(var)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public SimpleParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[67];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public SimpleParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
    	log.error("Second call to constructor of static parser.  You must either use ReInit() or set the JavaCC option STATIC to false during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    SimpleParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SimpleParser(java.io.Reader stream) {
    if (jj_initialized_once) {
    	log.error("Second call to constructor of static parser.  You must either use ReInit() or set the JavaCC option STATIC to false during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    SimpleParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SimpleParser(SimpleParserTokenManager tm) {
    if (jj_initialized_once) {
    	log.error("Second call to constructor of static parser.  You must either use ReInit() or set the JavaCC option STATIC to false during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SimpleParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = SimpleParserTokenManager.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error {
	private static final long serialVersionUID = -273063903583494802L; }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = SimpleParserTokenManager.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = SimpleParserTokenManager.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = SimpleParserTokenManager.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=SimpleParserTokenManager.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[40];
    for (int i = 0; i < 40; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 67; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
