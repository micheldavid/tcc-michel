Este trabalho visa o estudo de frameworks usados na criação de portais para grades, buscando a melhor escolha para integrar o protótipo AppMan, baseado no modelo GRAND, em um ambiente de portal. O objetivo deste, além de dar a continuidade no trabalho dos colegas Wagner Nobres, Tonismar Bernardo, Daniel Trindade Lemos, e de Rodrigo Reis, é incluir o middleware de grade AppMan em uma comunidade bastante evoluída, de grades com acesso via web, facilitando assim o uso deste projeto.
Deixar claro de onde vem, por onde passará e onde quer chegar




Arquitetura de portais de grade

INTERFACE VISUAL DO USUÁRIO (THOMAS et al, 2005)

The user authentication process is one of the distinguishing characteristics of portal systems. In addition to acquiring security credentials for Grid tasks, the login process provides the user with a customized view of the Grid. When a user logs into a Grid portal, it should bring up his or her current “Grid Context,” which includes the user’s persistent directory of objects, annotations, references and notification logs. It should also provide the set of tools he or she uses to access remote services, configured into groups (typically presented as tabbed browser panes) and organized the way he or she last left them. Access to the user’s Virtual Organization group identity within a collaboration gives instant access to group news and communications.

Grid-enabled portals have requirements similar to consumer-oriented portals (Yahoo, CNN, IBM intranet). Services typically include support for a context (login, customization, personalization, user persistent state); support for browser-based user interfaces (they can run anywhere - unlike user desktop clients, connections go through a portal server, so they can overcome firewall/NAT issues); they have “live” dynamic pages available to anonymous or authenticated, authorized users.

Science portals must also support issues related to the integration of Grid-based domain specific applications into the user’s environment. Hence, they must manage computations that run for days or weeks on thousands of nodes, and terabyte of scientific data. Specifically, these portals are required to manage credentials, launch jobs, manage files, and hide Grid complexities like batch job submission with RSL across distributed, heterogeneous grids composed of state-of-the-art HPC systems.

2.2. Service Architectures for Grid Portals

Portal services typically include: Security - users log onto a portal using a web browser and authenticate by means of a user-id and password (can maintain user, session information). Grid portals map this user ID to grid credentials. Data Management – provides access to files, collections, and metadata for local and remote files, supports third party file transfer; Job submission - the ability to submit jobs to the Grid for execution and monitoring is a classic service provided by portals; Information services - access to directories and status tools is an essential role of the portal; Application Interfaces – enables hiding Grid details behind useful application interfaces; Collaboration – portals serve as gateways to virtual organizations (VO) to share resources; Workflow – presents the user with tasks and assumes the responsibility of integrating these tasks into sequences; Visualization - provides tools that give users access to data, rendering, and visualization resources and can provide some level of data viewing or can be used to launch more advanced tools.

Grid portal services must be placed in the larger framework of Service Oriented Architectures (SOA) that are being used to build globally scalable Grid systems. A SOA supports service integration through published and discoverable interfaces. As they are message-based (e.g. SOAP) rather than tied to an application interface they can be integrated in a variety of frameworks. Under the assumption that the message semantics do not change, this model provides a very flexible programming environment. Service providers and clients are free to choose the implementation and backend logic and services independently of each other. The architecture of the Grid has been redefined in terms of a collection of remote Grid SOA services in order to take advantage of this capability. The portal architecture presented in this paper is based on the concept that the portal server is a container of service clients that are designed according to the portlet component model [14]. A portlet represents a window for grouping informational and input values. It is maintained through a Web Portlet engine, which creates, manages, and destroys all the portlets within the portal. Users have the option to integrate portals in their customized view to create an environment most suitable for the individual’s user experience. Common use cases for portlets are to maintain access a database, invoke a web service, and to connect to a grid-enabled service [15, 16]. On the administrative side, it is easy to add new portlets. Thus, many different groups can contribute portlets that can be plugged into a portal. Portlet technology is supported and reused by a number of projects and vendors, such as the OGCE, Jetspeed, uPortal, Sakai/CHEF, GridLab GridSphere, as well as most of the major vendors providing portal services including IBM, SUN, BEA and Oracle.

Through the use of a well-defined component model, it is possible to integrate Grid services using a SOA model and to leverage commodity technologies. The advantage of this architecture is that it provides a flexible component-based approach to building portals while being able to access Grid and Web based services. By supplying the user with a basic pallet of portlets that provide the front-end, interactive part of Grid services and applications, the user/developer can customize and organize the environment. The advantage of this architecture for Grid Portals is that it provides a natural way to incorporate “user-facing” Grid services into the portal environment.

However, using Grid Services is not sufficient to rapidly prototype portals. We still need to write the services themselves and be aware of the potentially changing software standards on the protocol level. Grid abstractions and their implementation (such as those defined by the Commodity Grid Kit (CoG) project [17] help in avoiding this problem. These abstractions allow the application programmer or middleware developer to readily make use of Grid services from a higher-level framework by defining mappings and interfaces between Grid services and particular commodity frameworks. For example, the CoG Kit includes Grid abstractions and workflows that make Grid programming far easier than other Grid middleware and are also a basis for GT4.

Unfortunately, the concept of a single specialized portlet for each remote Grid or web service is not scalable. The user should be able to discover Grid services and dynamically load an interface to interact with it, without having to install a new service client portlet into the server. The new Web Services for Remote Portlets (WSRP) [18] standard is expected to help with this problem. WSRP portlets can be distributed and managed remotely on many servers and the portals composed from WSDL-like information. Clients can select and configure the portlets as needed, and selection can become part of a persistent ``context''.

